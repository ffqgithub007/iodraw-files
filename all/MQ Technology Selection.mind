{"root":{"data":{"id":"d3x46xq63e00","created":1725413931880,"text":"MQ Technology Selection","priority":null,"progress":null,"note":null},"children":[{"data":{"id":"d3x484s4z4g0","created":1725414025601,"text":"puipose","note":"1. Decouple the model orchestration service from the geometric kernel engine service.\n\n2. Enable real-time multi-person collaborative operations on the same model file with low latency and high throughput.\n\n3. Ensure the order of operations, with messages being orderly.\n\n4. Ensure reliability and availability.\n\n5. Support persistent recording of user operations, allowing for failure rollback.\n\n6. The binding relationship between users, model files, message topics, and services, whether it is stateless or not, whether it needs to be maintained, and how to handle it, etc. 【to be discussed】","layout_mind_offset":{"x":-652,"y":-136}},"children":[]},{"data":{"id":"d3x48eecxm00","created":1725414046535,"text":"issues","note":"1.Real-time comparison model: How can we ensure that the models being compared are always up-to-date in real time? Since communication is based on messaging, there will be some network latency. Is there a certain tolerance for this delay, and is it acceptable?\n\n2.Ensuring the mapping relationship between geometric service states and message topics: As geometric services are stateful, how can we guarantee data consistency over a period of time (a session duration)?\n\n3.In the event of a geometric service failure or restart, how can we know which models should be loaded and where to obtain these models? This is because perhaps when the geometric service fails or restarts, there may already be users operating on the models. How are the previous model data handled, and is there a persistence operation involved?"},"children":[]},{"data":{"id":"d3x4c3n4ye80","created":1725414336579,"text":"Kafka","note":"、getDocument(id)、"},"children":[]},{"data":{"id":"d3x4cn1h8s80","created":1725414378804,"text":"RocketMQ"},"children":[]},{"data":{"id":"d3x4cyjg2000","created":1725414403835,"text":"RabbitMQ"},"children":[]},{"data":{"id":"d3x4d3u8bow0","created":1725414415371,"text":"ActiveMQ"},"children":[]},{"data":{"id":"d3x4d8niwp40","created":1725414425850,"text":"Pulsar"},"children":[]}]},"template":"right","theme":"fresh-green","version":"1.4.43"}